{"version":3,"sources":["_app.js","index.js"],"names":["App","useState","state","setState","playURL","setPlayURL","progress","setDownloadProgress","episode","setEpisode","search","setSearch","useEffect","show_id","Proxy","URLSearchParams","window","location","get","searchParams","prop","axios","then","res","data","_","orderBy","result","stories","reverse","console","log","handleDownload","url","filename","key","method","responseType","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","obj","fileDownload","handleSCDownload","saregamaCarvaanSongs","filter","includes","Number","song_id","map","song_url","setObject","find","seq_number","playAudio","media_url","className","story_title","href","onClick","src","autoPlay","controls","type","onChange","e","target","value","listRender","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.2595eb47.chunk.js","sourcesContent":["import response from \"./data.json\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\nimport fileDownload from \"js-file-download\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport saregamaCarvaan from \"./saregamaCarvaan-marathi.json\";\nimport saregamaCarvaanSongs from \"./saregama-carvaan-marathi-songs.json\";\n\nimport { useEffect, useState } from \"react\";\nlet listData = [];\n\nexport function App() {\n  const [state, setState] = useState([]);\n  const [playURL, setPlayURL] = useState(null);\n  const [progress, setDownloadProgress] = useState({});\n  const [episode, setEpisode] = useState({});\n  const [search, setSearch] = useState(0);\n\n  useEffect(() => {\n    const params = new Proxy(new URLSearchParams(window.location.search), {\n      get: (searchParams, prop) => searchParams.get(prop),\n    });\n    // Get the value of \"some_key\" in eg \"https://example.com/?some_key=some_value\"\n    let show_id = params.show_id; // \"some_value\"\n\n    axios\n      .get(\n        \"https://api.pocketfm.in/content_api/show.get_details?show_id=\"+show_id\n      )\n      .then((res) => {\n        let data = _.orderBy(\n          res.data.result[0].stories,\n          [\"seq_number\"],\n          [\"asc\"]\n        );\n\n        setState(data.reverse());\n        console.log(\"data\",data)\n      });\n    // let data = _.orderBy(response.result[0].stories, [\"seq_number\"], [\"asc\"]);\n    // setState(data);\n  }, []);\n\n  const handleDownload = async (url, filename, key) => {\n    // axios\n    //   .get(url.replace(\"http://d3d7iaj1xyzes9.cloudfront.net/\", \"\"), {\n    //     responseType: \"blob\",\n    //   })\n    //   .then((res) => {\n    //     fileDownload(res.data, filename);\n    //   });\n    await axios({\n      // url: url.replace(\"http://d3d7iaj1xyzes9.cloudfront.net/\", \"\"),\n      url,\n      method: \"GET\",\n      responseType: \"blob\", // important\n      onDownloadProgress: (progressEvent) => {\n        let percentCompleted = Math.round(\n          (progressEvent.loaded * 100) / progressEvent.total\n        ); // you can use this to show user percentage of file\n\n        let obj = {\n          ...progress,\n          [key]: percentCompleted,\n        };\n        setDownloadProgress(obj);\n      },\n    }).then((res) => {\n      fileDownload(res.data, filename);\n      let obj = {\n        ...progress,\n        [key]: 0,\n      };\n      setDownloadProgress(obj);\n    });\n  };\n\n  const apiDataFetch = async (index, data) => {\n    await axios({\n      url: `ajax?action=view&type=playsong&id=${data[index]}&cType=1`,\n      method: \"GET\",\n      timeout: 1000 * 20,\n      responseType: \"json\", // important\n      onDownloadProgress: (progressEvent) => {\n        let percentCompleted = Math.round(\n          (progressEvent.loaded * 100) / progressEvent.total\n        ); // you can use this to show user percentage of file\n      },\n    })\n      .then((res) => {\n        // listData.push(res.data[0]);\n        let song = res.data[0];\n        axios({\n          url: song?.playurl,\n          method: \"GET\",\n          responseType: \"blob\", // important\n          onDownloadProgress: (progressEvent) => {\n            let percentCompleted = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total\n            ); // you can use this to show user percentage of file\n    \n            console.log(percentCompleted);\n          },\n        })\n          .then((res) => {\n            fileDownload(\n              res.data,\n              `${song?.album_id}_${song?.album_name}_${song?.song_name}.mp3`\n            );\n          })\n      })\n      .catch((error) => {\n        console.error(index, data.length, data[index], error);\n      })\n      .finally(() => {\n        console.log(index, data.length, data[index]);\n\n        if (index > data.length - 2) {\n          downloadObjectAsJson(listData, \"saregama-carvaan-marathi-songs\");\n          console.warn(\"completed\");\n        } else {\n          setTimeout(() => {\n            apiDataFetch(++index, data);\n          }, 1);\n        }\n      });\n  };\n  const apiDataDownload = async (index, data) => {\n    let song = data[index];\n    axios({\n      url: song?.playurl,\n      method: \"GET\",\n      responseType: \"blob\", // important\n      onDownloadProgress: (progressEvent) => {\n        let percentCompleted = Math.round(\n          (progressEvent.loaded * 100) / progressEvent.total\n        ); // you can use this to show user percentage of file\n\n        console.log(percentCompleted);\n      },\n    })\n      .then((res) => {\n        fileDownload(\n          res.data,\n          `${song?.album_id}_${song?.album_name}_${song?.song_name}.mp3`\n        );\n      })\n      .catch((error) => {\n        console.error(index, data.length, data[index], error);\n      })\n      .finally(() => {\n        console.log(index, data.length, data[index]);\n\n        if (index > data.length - 2) {\n          // downloadObjectAsJson(listData, \"saregama-carvaan-marathi-songs\");\n          console.warn(\"completed\");\n        } else {\n          setTimeout(() => {\n            apiDataDownload(++index, data);\n          }, 1);\n        }\n      });\n  };\n\n  const handleSCDownload = async () => {\n    // let list = _.orderBy(saregamaCarvaan);\n    // apiDataFetch(0, [ 1505, 1515, 13652, 20290, 20294, 20295, 20315, 20370, 20375, 36403,\n    //   36643, 37580, 37692, 66574, 66629, 66630, 66631, 66707, 67425, 92603,\n    //   92604, 100053, 121408, 130073, 130963, 131112, 131113, 131132]);\n    console.log(\n      saregamaCarvaanSongs.filter((obj) =>\n        [\n          1505, 1515, 13652, 20290, 20294, 20295, 20315, 20370, 20375, 36403,\n          36643, 37580, 37692, 66574, 66629, 66630, 66631, 66707, 67425, 92603,\n          92604, 100053, 121408, 130073, 130963, 131112, 131113, 131132,\n        ].includes(Number(obj.song_id))\n      ).map(obj=>obj.song_url)\n    );\n    // apiDataDownload(\n    //   0,\n    //   saregamaCarvaanSongs.filter((obj) =>\n    //     [\n    //       1505, 1515, 13652, 20290, 20294, 20295, 20315, 20370, 20375, 36403,\n    //       36643, 37580, 37692, 66574, 66629, 66630, 66631, 66707, 67425, 92603,\n    //       92604, 100053, 121408, 130073, 130963, 131112, 131113, 131132,\n    //     ].includes(Number(obj.song_id))\n    //   )\n    // );\n\n    // console.log(_.groupBy(saregamaCarvaanSongs,(obj)=>obj.album_id))\n  };\n\n  function downloadObjectAsJson(exportObj, exportName) {\n    var dataStr =\n      \"data:text/json;charset=utf-8,\" +\n      encodeURIComponent(JSON.stringify(exportObj));\n    var downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  }\n  const onClick = (episodeObj) => {\n    setEpisode(episodeObj);\n  };\n  const setObject = (obj) => {\n    setEpisode(state.find((data) => data.seq_number === obj.seq_number));\n  };\n\n  const listRender = (data, search) => {\n    return data\n      .filter((obj) => (search ? obj.seq_number == search : true))\n\n      .map((obj) => {\n        return (\n          <div\n            key={obj.media_url}\n            className=\"card\"\n            onClick={() => onClick(obj)}\n          >\n            <h1> {obj.story_title} </h1>\n\n            <br />\n          </div>\n        );\n      });\n  };\n  const playAudio = (url, filename) => {\n    setPlayURL(url);\n  };\n  return episode?.media_url ? (\n    <>\n      <div key={episode.media_url} className=\"card\">\n        <h1> {episode.story_title} </h1>\n\n        <br />\n        <a\n          className=\"ml-1\"\n          href=\"#\"\n          onClick={() => setObject({ seq_number: episode.seq_number - 1 })}\n        >\n          Previous\n        </a>\n        <a\n          className=\"ml-1\"\n          href=\"#\"\n          onClick={() => setObject({ seq_number: episode.seq_number + 1 })}\n        >\n          Next\n        </a>\n        <a\n          className=\"ml-1\"\n          href=\"#\"\n          onClick={() =>\n            handleDownload(\n              episode.media_url,\n              `${episode.story_title}.mp3`,\n              episode.seq_number\n            )\n          }\n        >\n          Download{\" \"}\n          {progress[episode.seq_number]\n            ? ` ( ${progress[episode.seq_number]} )`\n            : null}\n        </a>\n\n        <a\n          className=\"ml-1\"\n          href=\"#\"\n          onClick={() =>\n            playAudio(episode.media_url, `${episode.story_title}.mp3`)\n          }\n        >\n          Play\n        </a>\n        <a className=\"ml-1\" href=\"#\" onClick={() => playAudio(null)}>\n          Stop\n        </a>\n        <a className=\"ml-1\" href=\"#\" onClick={() => setEpisode({})}>\n          Back\n        </a>\n\n        {episode.media_url === playURL ? (\n          <div className=\"player\">\n            <ReactAudioPlayer\n              src={episode.media_url}\n              autoPlay={true}\n              controls\n            />\n          </div>\n        ) : null}\n      </div>\n    </>\n  ) : (\n    <>\n      <input\n        type={\"number\"}\n        onChange={(e) => setSearch(e.target.value)}\n      ></input>\n      <a href=\"#\" onClick={handleSCDownload}>\n        Start Saregama Carvaan\n      </a>\n      <br />\n      {listRender(state, search)}\n    </>\n  );\n}\n","import {createRoot} from 'react-dom'\nimport {App} from './_app'\n\ncreateRoot(\n  document.getElementById('root')\n).render(<App />)"],"sourceRoot":""}