{"version":3,"sources":["pocketfm.js","kukufm.js","_app.js","index.js"],"names":["Pocketfm","useState","state","setState","playURL","setPlayURL","progress","setDownloadProgress","episode","setEpisode","search","setSearch","useEffect","show_id","Proxy","URLSearchParams","window","location","get","searchParams","prop","axios","then","res","data","_","orderBy","result","stories","reverse","handleDownload","url","filename","key","replace","method","responseType","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","obj","fileDownload","setObject","find","seq_number","playAudio","media_url","className","story_title","href","onClick","src","autoPlay","controls","type","onChange","e","target","value","filter","map","listRender","Kukufm","params","page","episodes","doc","DOMParser","parseFromString","JSON","parse","scripts","text","audio","contentUrl","open","web_uri","title","toLocaleLowerCase","match","App","app","setApp","console","log","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.46904c23.chunk.js","sourcesContent":["import response from \"./data.json\";\r\nimport _ from \"lodash\";\r\nimport axios from \"axios\";\r\nimport fileDownload from \"js-file-download\";\r\nimport ReactAudioPlayer from \"react-audio-player\";\r\nimport saregamaCarvaan from \"./saregamaCarvaan-marathi.json\";\r\nimport saregamaCarvaanSongs from \"./saregama-carvaan-marathi-songs.json\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nlet listData = [];\r\n\r\nexport function Pocketfm() {\r\n  const [state, setState] = useState([]);\r\n  const [playURL, setPlayURL] = useState(null);\r\n  const [progress, setDownloadProgress] = useState({});\r\n  const [episode, setEpisode] = useState({});\r\n  const [search, setSearch] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const params = new Proxy(new URLSearchParams(window.location.search), {\r\n      get: (searchParams, prop) => searchParams.get(prop),\r\n    });\r\n    // Get the value of \"some_key\" in eg \"https://example.com/?some_key=some_value\"\r\n    let show_id = params.show_id; // \"some_value\"\r\n\r\n    axios\r\n      .get(\r\n        \"https://api.pocketfm.in/content_api/show.get_details?show_id=\"+show_id\r\n      )\r\n      .then((res) => {\r\n        let data = _.orderBy(\r\n          res.data.result[0].stories,\r\n          [\"seq_number\"],\r\n          [\"asc\"]\r\n        );\r\n\r\n        setState(data.reverse());\r\n        // console.log(\"data\",data)\r\n      });\r\n    // let data = _.orderBy(response.result[0].stories, [\"seq_number\"], [\"asc\"]);\r\n    // setState(data);\r\n  }, []);\r\n\r\n  const handleDownload = async (url, filename, key) => {\r\n    // axios\r\n    //   .get(url.replace(\"http://d3d7iaj1xyzes9.cloudfront.net/\", \"\"), {\r\n    //     responseType: \"blob\",\r\n    //   })\r\n    //   .then((res) => {\r\n    //     fileDownload(res.data, filename);\r\n    //   });\r\n    await axios({\r\n      // url: url.replace(\"http://d3d7iaj1xyzes9.cloudfront.net/\", \"\"),\r\n      url:url.replace('http://','https://'),\r\n      method: \"GET\",\r\n      responseType: \"blob\", // important\r\n      onDownloadProgress: (progressEvent) => {\r\n        let percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        ); // you can use this to show user percentage of file\r\n\r\n        let obj = {\r\n          ...progress,\r\n          [key]: percentCompleted,\r\n        };\r\n        setDownloadProgress(obj);\r\n      },\r\n    }).then((res) => {\r\n      fileDownload(res.data, filename);\r\n      let obj = {\r\n        ...progress,\r\n        [key]: 0,\r\n      };\r\n      setDownloadProgress(obj);\r\n    });\r\n  };\r\n\r\n  const apiDataFetch = async (index, data) => {\r\n    await axios({\r\n      url: `ajax?action=view&type=playsong&id=${data[index]}&cType=1`,\r\n      method: \"GET\",\r\n      timeout: 1000 * 20,\r\n      responseType: \"json\", // important\r\n      onDownloadProgress: (progressEvent) => {\r\n        let percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        ); // you can use this to show user percentage of file\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // listData.push(res.data[0]);\r\n        let song = res.data[0];\r\n        axios({\r\n          url: song?.playurl.replace('http://','https://'),\r\n          method: \"GET\",\r\n          responseType: \"blob\", // important\r\n          onDownloadProgress: (progressEvent) => {\r\n            let percentCompleted = Math.round(\r\n              (progressEvent.loaded * 100) / progressEvent.total\r\n            ); // you can use this to show user percentage of file\r\n    \r\n            // console.log(percentCompleted);\r\n          },\r\n        })\r\n          .then((res) => {\r\n            fileDownload(\r\n              res.data,\r\n              `${song?.album_id}_${song?.album_name}_${song?.song_name}.mp3`\r\n            );\r\n          })\r\n      })\r\n      .catch((error) => {\r\n        console.error(index, data.length, data[index], error);\r\n      })\r\n      .finally(() => {\r\n        // console.log(index, data.length, data[index]);\r\n\r\n        if (index > data.length - 2) {\r\n          downloadObjectAsJson(listData, \"saregama-carvaan-marathi-songs\");\r\n          console.warn(\"completed\");\r\n        } else {\r\n          setTimeout(() => {\r\n            apiDataFetch(++index, data);\r\n          }, 1);\r\n        }\r\n      });\r\n  };\r\n  const apiDataDownload = async (index, data) => {\r\n    let song = data[index];\r\n    axios({\r\n      url: song?.playurl.replace('http://','https://'),\r\n      method: \"GET\",\r\n      responseType: \"blob\", // important\r\n      onDownloadProgress: (progressEvent) => {\r\n        let percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        ); // you can use this to show user percentage of file\r\n\r\n        // console.log(percentCompleted);\r\n      },\r\n    })\r\n      .then((res) => {\r\n        fileDownload(\r\n          res.data,\r\n          `${song?.album_id}_${song?.album_name}_${song?.song_name}.mp3`\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.error(index, data.length, data[index], error);\r\n      })\r\n      .finally(() => {\r\n        // console.log(index, data.length, data[index]);\r\n\r\n        if (index > data.length - 2) {\r\n          // downloadObjectAsJson(listData, \"saregama-carvaan-marathi-songs\");\r\n          console.warn(\"completed\");\r\n        } else {\r\n          setTimeout(() => {\r\n            apiDataDownload(++index, data);\r\n          }, 1);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSCDownload = async () => {\r\n    // let list = _.orderBy(saregamaCarvaan);\r\n    // apiDataFetch(0, [ 1505, 1515, 13652, 20290, 20294, 20295, 20315, 20370, 20375, 36403,\r\n    //   36643, 37580, 37692, 66574, 66629, 66630, 66631, 66707, 67425, 92603,\r\n    //   92604, 100053, 121408, 130073, 130963, 131112, 131113, 131132]);\r\n    // console.log(\r\n    //   saregamaCarvaanSongs.filter((obj) =>\r\n    //     [\r\n    //       1505, 1515, 13652, 20290, 20294, 20295, 20315, 20370, 20375, 36403,\r\n    //       36643, 37580, 37692, 66574, 66629, 66630, 66631, 66707, 67425, 92603,\r\n    //       92604, 100053, 121408, 130073, 130963, 131112, 131113, 131132,\r\n    //     ].includes(Number(obj.song_id))\r\n    //   ).map(obj=>obj.song_url)\r\n    // );\r\n    // apiDataDownload(\r\n    //   0,\r\n    //   saregamaCarvaanSongs.filter((obj) =>\r\n    //     [\r\n    //       1505, 1515, 13652, 20290, 20294, 20295, 20315, 20370, 20375, 36403,\r\n    //       36643, 37580, 37692, 66574, 66629, 66630, 66631, 66707, 67425, 92603,\r\n    //       92604, 100053, 121408, 130073, 130963, 131112, 131113, 131132,\r\n    //     ].includes(Number(obj.song_id))\r\n    //   )\r\n    // );\r\n\r\n    // console.log(_.groupBy(saregamaCarvaanSongs,(obj)=>obj.album_id))\r\n  };\r\n\r\n  function downloadObjectAsJson(exportObj, exportName) {\r\n    var dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(exportObj));\r\n    var downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\r\n    document.body.appendChild(downloadAnchorNode); // required for firefox\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  }\r\n  const onClick = (episodeObj) => {\r\n    setEpisode(episodeObj);\r\n  };\r\n  const setObject = (obj) => {\r\n    setEpisode(state.find((data) => data.seq_number === obj.seq_number));\r\n  };\r\n\r\n  const listRender = (data, search) => {\r\n    return data\r\n      .filter((obj) => (search ? obj.seq_number == search : true))\r\n\r\n      .map((obj) => {\r\n        return (\r\n          <div\r\n            key={obj.media_url}\r\n            className=\"card\"\r\n            onClick={() => onClick(obj)}\r\n          >\r\n            <h1> {obj.story_title} </h1>\r\n\r\n            <br />\r\n          </div>\r\n        );\r\n      });\r\n  };\r\n  const playAudio = (url, filename) => {\r\n    setPlayURL(url);\r\n  };\r\n  return episode?.media_url ? (\r\n    <>\r\n      <div key={episode.media_url} className=\"card\">\r\n        <h1> {episode.story_title} </h1>\r\n\r\n        <br />\r\n        <a\r\n          className=\"ml-1\"\r\n          href=\"#\"\r\n          onClick={() => setObject({ seq_number: episode.seq_number - 1 })}\r\n        >\r\n          Previous\r\n        </a>\r\n        <a\r\n          className=\"ml-1\"\r\n          href=\"#\"\r\n          onClick={() => setObject({ seq_number: episode.seq_number + 1 })}\r\n        >\r\n          Next\r\n        </a>\r\n        <a\r\n          className=\"ml-1\"\r\n          href=\"#\"\r\n          onClick={() =>\r\n            handleDownload(\r\n              episode.media_url,\r\n              `${episode.story_title}.mp3`,\r\n              episode.seq_number\r\n            )\r\n          }\r\n        >\r\n          Download{\" \"}\r\n          {progress[episode.seq_number]\r\n            ? ` ( ${progress[episode.seq_number]} )`\r\n            : null}\r\n        </a>\r\n\r\n        <a\r\n          className=\"ml-1\"\r\n          href=\"#\"\r\n          onClick={() =>\r\n            playAudio(episode.media_url, `${episode.story_title}.mp3`)\r\n          }\r\n        >\r\n          Play\r\n        </a>\r\n        <a className=\"ml-1\" href=\"#\" onClick={() => playAudio(null)}>\r\n          Stop\r\n        </a>\r\n        <a className=\"ml-1\" href=\"#\" onClick={() => setEpisode({})}>\r\n          Back\r\n        </a>\r\n\r\n        {episode.media_url === playURL ? (\r\n          <div className=\"player\">\r\n            <ReactAudioPlayer\r\n              src={episode.media_url}\r\n              autoPlay={true}\r\n              controls\r\n            />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <input\r\n        type={\"number\"}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      ></input>\r\n      {/* <a href=\"#\" onClick={handleSCDownload}>\r\n        Start Saregama Carvaan\r\n      </a> */}\r\n      <br />\r\n      {listRender(state, search)}\r\n    </>\r\n  );\r\n}\r\n","import response from \"./data.json\";\r\nimport _ from \"lodash\";\r\nimport axios from \"axios\";\r\nimport fileDownload from \"js-file-download\";\r\nimport ReactAudioPlayer from \"react-audio-player\";\r\nimport saregamaCarvaan from \"./saregamaCarvaan-marathi.json\";\r\nimport saregamaCarvaanSongs from \"./saregama-carvaan-marathi-songs.json\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nlet listData = [];\r\n\r\nexport function Kukufm() {\r\n  const [state, setState] = useState([]);\r\n  const [playURL, setPlayURL] = useState(null);\r\n  const [progress, setDownloadProgress] = useState({});\r\n  const [episode, setEpisode] = useState({});\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const params = new Proxy(new URLSearchParams(window.location.search), {\r\n      get: (searchParams, prop) => searchParams.get(prop),\r\n    });\r\n    // Get the value of \"some_key\" in eg \"https://example.com/?some_key=some_value\"\r\n    let show_id = params.show_id; // \"some_value\"\r\n    let page = params?.page || 1;\r\n\r\n    axios\r\n      .get(`https://kukufm.com/api/v2.1/channels/${show_id}/episodes/?lang=english&page=${page}`)\r\n      .then((res) => {\r\n        let data = res.data.episodes;\r\n\r\n        setState(data);\r\n      });\r\n  }, []);\r\n\r\n  const handleDownload = async (url, filename, key) => {\r\n    await axios({\r\n      // url: url.replace(\"http://d3d7iaj1xyzes9.cloudfront.net/\", \"\"),\r\n      url: 'https://kukufm.com'+url,\r\n      method: \"GET\",\r\n      responseType: \"text\", // important\r\n      onDownloadProgress: (progressEvent) => {\r\n        let percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        ); // you can use this to show user percentage of file\r\n\r\n        let obj = {\r\n          ...progress,\r\n          [key]: percentCompleted,\r\n        };\r\n        setDownloadProgress(obj);\r\n      },\r\n    }).then((res) => {\r\n      var parser = new DOMParser();\r\n      var doc = parser.parseFromString(res.data, \"text/html\");\r\n      let url = JSON.parse(doc.scripts[0].text).audio[0].contentUrl;\r\n        window.open(url);\r\n\r\n    //   handleDownload2(url, filename, key);\r\n    //   fileDownload(url, filename);\r\n      let obj = {\r\n        ...progress,\r\n        [key]: 0,\r\n      };\r\n      setDownloadProgress(obj);\r\n    });\r\n  };\r\n\r\n  const handleDownload2 = async (url, filename, key) => {\r\n    await axios({\r\n      // url: url.replace(\"http://d3d7iaj1xyzes9.cloudfront.net/\", \"\"),\r\n      url: url,\r\n      method: \"GET\",\r\n      headers: {\r\n        'Content-Type': 'application/mp4',\r\n      },\r\n      responseType: \"blob\", // important\r\n      onDownloadProgress: (progressEvent) => {\r\n        let percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        ); // you can use this to show user percentage of file\r\n\r\n        let obj = {\r\n          ...progress,\r\n          [key]: percentCompleted,\r\n        };\r\n        setDownloadProgress(obj);\r\n      },\r\n      \r\n    })\r\n    .then((blob) => {\r\n        const url = window.URL.createObjectURL(\r\n            new Blob([blob]),\r\n          );\r\n          const link = document.createElement('a');\r\n          link.href = url;\r\n          link.setAttribute(\r\n            'download',\r\n            filename,\r\n          );\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          link.parentNode.removeChild(link);\r\n    //   fileDownload(res, filename,'application/mp4');\r\n      let obj = {\r\n        ...progress,\r\n        [key]: 0,\r\n      };\r\n      setDownloadProgress(obj);\r\n    });\r\n  };\r\n\r\n  const apiDataFetch = async (index, data) => {\r\n    await axios({\r\n      url: `ajax?action=view&type=playsong&id=${data[index]}&cType=1`,\r\n      method: \"GET\",\r\n      timeout: 1000 * 20,\r\n      responseType: \"json\", // important\r\n      onDownloadProgress: (progressEvent) => {\r\n        let percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        ); // you can use this to show user percentage of file\r\n      },\r\n    })\r\n      .then((res) => {\r\n        // listData.push(res.data[0]);\r\n        let song = res.data[0];\r\n        axios({\r\n          url: song?.playurl.replace(\"http://\", \"https://\"),\r\n          method: \"GET\",\r\n          responseType: \"blob\", // important\r\n          onDownloadProgress: (progressEvent) => {\r\n            let percentCompleted = Math.round(\r\n              (progressEvent.loaded * 100) / progressEvent.total\r\n            ); // you can use this to show user percentage of file\r\n\r\n            console.log(percentCompleted);\r\n          },\r\n        }).then((res) => {\r\n          fileDownload(\r\n            res.data,\r\n            `${song?.album_id}_${song?.album_name}_${song?.song_name}.mp3`\r\n          );\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(index, data.length, data[index], error);\r\n      })\r\n      .finally(() => {\r\n        console.log(index, data.length, data[index]);\r\n\r\n        if (index > data.length - 2) {\r\n          downloadObjectAsJson(listData, \"saregama-carvaan-marathi-songs\");\r\n          console.warn(\"completed\");\r\n        } else {\r\n          setTimeout(() => {\r\n            apiDataFetch(++index, data);\r\n          }, 1);\r\n        }\r\n      });\r\n  };\r\n  const apiDataDownload = async (index, data) => {\r\n    let song = data[index];\r\n    axios({\r\n      url: song?.playurl.replace(\"http://\", \"https://\"),\r\n      method: \"GET\",\r\n      responseType: \"blob\", // important\r\n      onDownloadProgress: (progressEvent) => {\r\n        let percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        ); // you can use this to show user percentage of file\r\n\r\n        console.log(percentCompleted);\r\n      },\r\n    })\r\n      .then((res) => {\r\n        fileDownload(\r\n          res.data,\r\n          `${song?.album_id}_${song?.album_name}_${song?.song_name}.mp3`\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.error(index, data.length, data[index], error);\r\n      })\r\n      .finally(() => {\r\n        console.log(index, data.length, data[index]);\r\n\r\n        if (index > data.length - 2) {\r\n          // downloadObjectAsJson(listData, \"saregama-carvaan-marathi-songs\");\r\n          console.warn(\"completed\");\r\n        } else {\r\n          setTimeout(() => {\r\n            apiDataDownload(++index, data);\r\n          }, 1);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSCDownload = async () => {\r\n    // let list = _.orderBy(saregamaCarvaan);\r\n    // apiDataFetch(0, [ 1505, 1515, 13652, 20290, 20294, 20295, 20315, 20370, 20375, 36403,\r\n    //   36643, 37580, 37692, 66574, 66629, 66630, 66631, 66707, 67425, 92603,\r\n    //   92604, 100053, 121408, 130073, 130963, 131112, 131113, 131132]);\r\n    console.log(\r\n      saregamaCarvaanSongs\r\n        .filter((obj) =>\r\n          [\r\n            1505, 1515, 13652, 20290, 20294, 20295, 20315, 20370, 20375, 36403,\r\n            36643, 37580, 37692, 66574, 66629, 66630, 66631, 66707, 67425,\r\n            92603, 92604, 100053, 121408, 130073, 130963, 131112, 131113,\r\n            131132,\r\n          ].includes(Number(obj.song_id))\r\n        )\r\n        .map((obj) => obj.song_url)\r\n    );\r\n    // apiDataDownload(\r\n    //   0,\r\n    //   saregamaCarvaanSongs.filter((obj) =>\r\n    //     [\r\n    //       1505, 1515, 13652, 20290, 20294, 20295, 20315, 20370, 20375, 36403,\r\n    //       36643, 37580, 37692, 66574, 66629, 66630, 66631, 66707, 67425, 92603,\r\n    //       92604, 100053, 121408, 130073, 130963, 131112, 131113, 131132,\r\n    //     ].includes(Number(obj.song_id))\r\n    //   )\r\n    // );\r\n\r\n    // console.log(_.groupBy(saregamaCarvaanSongs,(obj)=>obj.album_id))\r\n  };\r\n\r\n  function downloadObjectAsJson(exportObj, exportName) {\r\n    var dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(exportObj));\r\n    var downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\r\n    document.body.appendChild(downloadAnchorNode); // required for firefox\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  }\r\n  const onClick = (episodeObj) => {\r\n    setEpisode(episodeObj);\r\n  };\r\n  const setObject = (obj) => {\r\n    setEpisode(state.find((data) => data.seq_number === obj.seq_number));\r\n  };\r\n\r\n  const listRender = (data, search) => {\r\n    return data\r\n      .filter((obj) =>\r\n        search\r\n          ? obj.title.toLocaleLowerCase().match(search.toLocaleLowerCase())\r\n            ? true\r\n            : false\r\n          : true\r\n      )\r\n\r\n      .map((obj) => {\r\n        return (\r\n          <div key={obj.web_uri} className=\"card\" onClick={() => onClick(obj)}>\r\n            <h1> {obj.title} </h1>\r\n\r\n            <br />\r\n          </div>\r\n        );\r\n      });\r\n  };\r\n  const playAudio = (url, filename) => {\r\n    setPlayURL(url);\r\n  };\r\n  return episode?.web_uri ? (\r\n    <>\r\n      <div key={episode.web_uri} className=\"card\">\r\n        <h1> {episode.title} </h1>\r\n\r\n        <br />\r\n\r\n        <a\r\n          className=\"ml-1\"\r\n          href=\"#\"\r\n          onClick={() =>\r\n            handleDownload(episode.web_uri, `${episode.title}.mp4`)\r\n          }\r\n        >\r\n          Download{\" \"}\r\n          {progress[episode.title] ? ` ( ${progress[episode.title]} )` : null}\r\n        </a>\r\n\r\n        <a\r\n          className=\"ml-1\"\r\n          href=\"#\"\r\n          onClick={() => playAudio(episode.web_uri, `${episode.title}.mp3`)}\r\n        >\r\n          Play\r\n        </a>\r\n        <a className=\"ml-1\" href=\"#\" onClick={() => playAudio(null)}>\r\n          Stop\r\n        </a>\r\n        <a className=\"ml-1\" href=\"#\" onClick={() => setEpisode({})}>\r\n          Back\r\n        </a>\r\n\r\n        {episode.web_uri === playURL ? (\r\n          <div className=\"player\">\r\n            <ReactAudioPlayer src={episode.web_uri} autoPlay={true} controls />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  ) : (\r\n    <>\r\n      <input type=\"text\" onChange={(e) => setSearch(e.target.value)}></input>\r\n      <br />\r\n      {listRender(state, search)}\r\n    </>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport { Pocketfm } from \"./pocketfm\";\nimport { Kukufm } from \"./kukufm\";\nexport function App() {\n  const [app, setApp] = useState([]);\n\n  useEffect(() => {\n    const params = new Proxy(new URLSearchParams(window.location.search), {\n      get: (searchParams, prop) => searchParams.get(prop),\n    });\n    let app = params.app;\n    console.log();\n    setApp(app);\n  }, []);\n  if (app === \"kuku\") {\n    return <Kukufm />;\n  }\n  if (app === \"pfm\") {\n    return <Pocketfm />;\n  }\n  return \"Please Pass APP NAME\"\n}\n","import {createRoot} from 'react-dom'\nimport {App} from './_app'\n\ncreateRoot(\n  document.getElementById('root')\n).render(<App />)"],"sourceRoot":""}